module Example_2 (
    input clk,
    input reset,
    output reg red,
    output reg yellow,
    output reg green
);

    // Definición de estados
    parameter STATE_GREEN = 2'b00;
    parameter STATE_YELLOW = 2'b01;
    parameter STATE_RED = 2'b10;

    // Registro de estado actual
    reg [1:0] current_state;

    // Contador de ciclos
    reg [3:0] cycle_counter;

    // Lógica de transición de estados y salidas
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= STATE_GREEN;
            cycle_counter <= 4'd0;
            red <= 0;
            yellow <= 0;
            green <= 1;
        end else begin
            case (current_state)
                STATE_GREEN: begin
                    if (cycle_counter == 4'd3) begin
                        current_state <= STATE_YELLOW;
                        cycle_counter <= 4'd0;
                        red <= 0;
                        yellow <= 1;
                        green <= 0;
                    end else begin
                        cycle_counter <= cycle_counter + 1'b1;
                        red <= 0;
                        yellow <= 0;
                        green <= 1;
                    end
                end
                STATE_YELLOW: begin
                    if (cycle_counter == 4'd1) begin
                        current_state <= STATE_RED;
                        cycle_counter <= 4'd0;
                        red <= 1;
                        yellow <= 0;
                        green <= 0;
                    end else begin
                        cycle_counter <= cycle_counter + 1'b1;
                        red <= 0;
                        yellow <= 1;
                        green <= 0;
                    end
                end
                STATE_RED: begin
                    if (cycle_counter == 4'd5) begin
                        current_state <= STATE_GREEN;
                        cycle_counter <= 4'd0;
                        red <= 0;
                        yellow <= 0;
                        green <= 1;
                    end else begin
                        cycle_counter <= cycle_counter + 1'b1;
                        red <= 1;
                        yellow <= 0;
                        green <= 0;
                    end
                end
                default: begin
                    current_state <= STATE_GREEN;
                    cycle_counter <= 4'd0;
                    red <= 0;
                    yellow <= 0;
                    green <= 1;
                end
            endcase
        end
    end

endmodule